#!/bin/bash
#######################################################################
# build.config
#
# Part of the SEALs project.
# This is the configuration file; all config variables must go here.
# 
# !! IMP NOTE TO THE END-USER OF THIS PROJECT !!
# You are responsible for editing this configuration file, setting the 
# variables to sane values.
# To help you out, the place in the source below which has the config 
# variables that you MUST update have been marked with a comment line 
# as follows:
# # @@@@@
# So, you could just search for this string '@@@@@' (excluding the quotes of course),
# and make sure you update the following config variable(s) to the sane value 
# for your box.
# !!
#---
# Author: Kaiwan N Billimoria
# (C) kaiwanTECH
# Created: Dec 2014.
# Last Update: July 2017.
#---
#######################################################################
#
# Generic Config file.
# For a minimal QEMU-ARM project, we Expect that:
# - an x86-to-ARM toolchain is installed and working
# - a recent version of the Linux kernel source tree is available
# - a recent version of busybox source tree is available
##############

set -a   # auto export all vars

##################### UPDATE as required
# @@@@@
CONFIG_NAME_STR="SEALs config file for [you fill this in]"

# Toolchain
# the toolchain to use; expect that it is installed and the PATH is setup..
# @@@@@
export CXX=arm-none-linux-gnueabi-  # toolchain prefix 
# CXX_LOC is the location of the x86-to-ARM toolchain on disk.
# (used to setup the PATH and locate the ARM shared libraries within the toolchain)
# @@@@@
export CXX_LOC=~/MentorGraphics/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux

# Toolchain in the PATH
export PATH=$PATH:${CXX_LOC}/bin ### UPDATE ### on your system!

###------###

export TOPDIR=$(pwd)

### UPDATE ### on your system!
# @@@@@
STG=~/scratchpad/SEALS_staging
 # Recommendation: if running a cloud-sync service (like Dropbox), keep the 
 # staging area outside it.

# Okay, so under the ${STG} folder, we expect you have extracted the 
# source of busybox into the folder ${BB_FOLDER} ver ${BB_VER}.
# (Update the variables below to reflect your settings and installation).
# @@@@@
export BB_FOLDER=${STG}/busybox-1.26.2
export BB_VER="1.26.2"
export ROOTFS=${STG}/rootfs
export IMAGES_FOLDER=${STG}/images
export IMAGES_BKP_FOLDER=${STG}/images_bkp
export CONFIGS_FOLDER=${STG}/configs


#####
# Select the ARM platform (to build the kernel for). Choices:
# a. ARM Versatile PB, cpu arch v5 (older --> ARM926EJ-S)
# b. ARM Versatile Express, cpu arch v7 (modern --> Cortex-A9)
##

# @@@@@
#export ARM_CPU_ARCH=v5   # if arch v5, build kernel for ARM VersatilePB 
                          # platform, kernel ver 3.1.5 (or 2.6.28.10)
export ARM_CPU_ARCH=v7    # if arch v7, build kernel for ARM Versatile 
                          # Express platform, kernel ver 3.10.24 (LTS kernel)

if [ ${ARM_CPU_ARCH} = "v5" ]; then         # Unlikely
	export ARM_PLATFORM_STR="Versatile PB"
	export ARM_PLATFORM=versatile
	export ARM_PLATFORM_OPT=versatilepb

### UPDATE ### on your system!
# @@@@@
	export KERNEL_FOLDER=~/3.14.34
	export KERNELVER=3.14.34

elif [ ${ARM_CPU_ARCH} = "v7" ]; then       # Likely
	export ARM_PLATFORM_STR="Versatile Express (A9)"
	export ARM_PLATFORM=vexpress
	export ARM_PLATFORM_OPT=vexpress-a9

### UPDATE ### on your system!
# Okay, so under the ${STG} folder (or other), we expect you have extracted the 
# source of the Linux kernel into ${KERNEL_FOLDER} , ver ${KERNELVER}.
# (Update the variables below to reflect your settings and installation).
# @@@@@
	export KERNEL_FOLDER=~/scratchpad/SEALS_staging/linux-4.9.1
	export KERNELVER=4.9.1
fi
#####

#####
# @@@@@
# SEALs (virtual) "Hardware"
SEALS_RAM=512
## RootFS
# !Careful! Set to 1 to force a rebuild of the rootfs; implies OVERWRITING any
# existing rootfs
RFS_FORCE_REBUILD=0
# Rootfs size: recommendation: if using a kdump kernel, make it >= 768 MB,
# else 256 MB is fine.
RFS_SZ_MB=256

#####
# @@@@@
# SEALs kernel command-line
SEALS_K_CMDLINE="console=ttyAMA0 root=/dev/mmcblk0 init=/sbin/init"
# if 512M RAM, reserve 32M for crashk, else if 256M RAM, reserve 16M
#K_CMDLINE_XTRA="crashkernel=32M" # works with 32M not 16M [?]
#K_CMDLINE_XTRA="initcall_debug ignore_loglevel debug"
[ ! -z "${K_CMDLINE_XTRA}" ] && SEALS_K_CMDLINE="${SEALS_K_CMDLINE} ${K_CMDLINE_XTRA}"

##### Config vars for what to build
# VAR=1   :   'do' the work 'VAR'
# VAR=0   :   'do Not' do the work 'VAR'
export BUILD_KERNEL=0
export BUILD_ROOTFS=0
export GEN_EXT4_ROOTFS_IMAGE=0
export SAVE_BACKUP_IMG_CONFIGS=0
export RUN_QEMU=0


### "WIPE_*_CONFIG" directives
# Set var to 'y' implies any existing kernel configuration is wiped out.
# Suggestion: set to 'y' for the FIRST build with a clean kernel source tree..
# @@@@@
export WIPE_KERNEL_CONFIG=n
# Set var to 'y' implies any existing busybox configuration is wiped out.
# Suggestion: set to 'y' for the FIRST build with a clean busybox source tree..
# @@@@@
export WIPE_BUSYBOX_CONFIG=n


###
# Config vars for when we run QEMU:
export KGDB_MODE=0  # make '1' to have qemu run w/ the '-S' switch (waits for gdb to 'connect')
export SMP_EMU_MODE=0  # make '1' to have qemu run w/ 2 emulated cores 
                       # (only applicable on the Versatile Express C-A9 platform)

#--- End build.config
